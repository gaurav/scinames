significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements[order_measurements$significant == "yes",]
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements[family_measurements$significant == "yes",]
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(id))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements[genus_measurements$significant == "yes",]
nrow(name_clusters_all)
1045-862
name_clusters[name_clusters$taxon_concept_count > 0,]
name_clusters_recognized <- name_clusters[name_clusters$taxon_concept_count > 0,]
name_clusters_not_extralimital <- name_clusters_recognized[!is.na(name_clusters_recognized$order),]
nrow(name_clusters_not_extralimital)
nrow(name_clusters_recognized)
name_clusters_not_extralimital_with_desc <- merge(name_clusters_not_extralimital, original_descs, by.x = "name_lc", by.y = "species_lc", all.x = TRUE)
name_clusters$species_lc <- tolower(name_clusters$species)
name_clusters$name_lc <- tolower(name_clusters$name)
name_clusters_recognized <- name_clusters[name_clusters$taxon_concept_count > 0,]
nrow(name_clusters_recognized)
name_clusters_not_extralimital <- name_clusters_recognized[!is.na(name_clusters_recognized$order),]
nrow(name_clusters_not_extralimital)
name_clusters_not_extralimital_with_desc <- merge(name_clusters_not_extralimital, original_descs, by.x = "name_lc", by.y = "species_lc", all.x = TRUE)
nrow(name_clusters_not_extralimital_with_desc)
summary(name_clusters_not_extralimital_with_desc$year)
which(is.na(name_clusters_not_extralimital_with_desc$year))
name_clusters_not_extralimital_with_desc[which(is.na(name_clusters_not_extralimital_with_desc$year))]
name_clusters_not_extralimital_with_desc[which(is.na(name_clusters_not_extralimital_with_desc$year)),]
summary(name_clusters_not_extralimital_with_desc$year)
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
nrow(original_descs)
summary(original_descs$year)
sum(is.na(original_descs$year))
original_descs$species_lc <- tolower(original_descs$species)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(name_clusters$taxon_concept_count)
name_clusters$species_lc <- tolower(name_clusters$species)
name_clusters$name_lc <- tolower(name_clusters$name)
name_clusters_recognized <- name_clusters[name_clusters$taxon_concept_count > 0,]
nrow(name_clusters_recognized)
name_clusters_not_extralimital <- name_clusters_recognized[!is.na(name_clusters_recognized$order),]
nrow(name_clusters_not_extralimital)
name_clusters_not_extralimital_with_desc <- merge(name_clusters_not_extralimital, original_descs, by.x = "name_lc", by.y = "species_lc", all.x = TRUE)
nrow(name_clusters_not_extralimital_with_desc)
summary(name_clusters_not_extralimital_with_desc$year)
original_descs$species_lc == "polioptila caerulea"
original_descs[original_descs$species_lc == "polioptila caerulea",]
original_descs[original_descs$species == "Polioptila caerulea",]
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
nrow(original_descs)
summary(original_descs$year)
sum(is.na(original_descs$year))
original_descs$species_lc <- tolower(original_descs$species)
latest_aou_with_descriptions <- merge(latest_aou, original_descs, by = "species_lc", all.x = TRUE)
original_descs[original_descs$species_lc == "polioptila caerulea",]
name_clusters_not_extralimital_with_desc <- merge(name_clusters_not_extralimital, original_descs, by.x = "name_lc", by.y = "species_lc", all.x = TRUE)
nrow(name_clusters_not_extralimital_with_desc)
summary(name_clusters_not_extralimital_with_desc$year)
cumsum(rev(table(name_clusters_not_extralimital_with_desc$year)))
round(3/2127 * 100, 2)
round(15/2127 * 100, 2)
round(3/833 * 100, 2)
round(15/833 * 100, 2)
round(24/833 * 100, 2)
round(31/833 * 100, 2)
splumps <- read.csv("../splumps/list.csv")
summary(splumps$type)
lumps <- splumps[splumps$type == "lump",]
nrow(lumps)
splits <- splumps[splumps$type == "split",]
nrow(splits)
hist(splumps$year)
trajectories <- table(name_clusters$trajectory_lumps_splits)
sum(trajectories)
taxon_concepts[taxon_concepts$name_cluster_id == "f1ce9f45-cedb-4f10-a85f-09c348421ab6",]
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
name_clusters <- name_clusters_all[name_clusters_all$taxon_concept_count > 0,]
nrow(name_clusters)
name_clusters <- name_clusters[!is.na(name_clusters$order),]
nrow(name_clusters)
sum(is.na(name_clusters$taxon_concept_count))
sum(name_clusters$taxon_concept_count)
sort(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]
nrow(name_clusters[which.max(name_clusters$taxon_concept_count),])
name_clusters[name_clusters$taxon_concept_count == max(name_clusters$taxon_concept_count),]
name_clusters[name_clusters$taxon_concept_count == max(name_clusters$taxon_concept_count),]$taxon_concept_count
name_clusters_all[name_clusters_all$taxon_concept_count == 6,]
taxon_concepts_per_name <- tapply(
taxon_concepts$name_cluster_id,
factor(taxon_concepts$name_cluster_id),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
max(taxon_concepts_per_name)
taxon_concepts[taxon_concepts$name_cluster_id == "f1ce9f45-cedb-4f10-a85f-09c348421ab6",]
total_recognized_name_clusters = nrow(name_clusters)
total_recognized_name_clusters
count_name_clusters_exactly_one <- sum(name_clusters$taxon_concept_count == 1)
count_name_clusters_exactly_one
stability <- count_name_clusters_exactly_one / total_recognized_name_clusters
round(stability * 100, 2)
count_name_clusters_more_than_one <- sum(name_clusters$taxon_concept_count > 1)
count_name_clusters_more_than_one
correction_rate <- count_name_clusters_more_than_one / total_recognized_name_clusters
round(correction_rate * 100, 2)
count_name_clusters_exactly_two <- sum(name_clusters$taxon_concept_count == 2)
count_name_clusters_exactly_two
single_correction <- count_name_clusters_exactly_two / total_recognized_name_clusters
round(single_correction * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count >= 2)
count_name_clusters_two_or_more
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
count_name_clusters_more_than_two <- sum(name_clusters$taxon_concept_count > 2)
count_name_clusters_more_than_two
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
count_name_clusters_one_or_more
count_name_clusters_one_or_more <- sum(name_clusters$taxon_concept_count >= 1)
count_name_clusters_one_or_more
count_name_clusters_more_than_one <- sum(name_clusters$taxon_concept_count > 1)
count_name_clusters_more_than_one
correction_rate <- count_name_clusters_more_than_one / total_recognized_name_clusters
round(correction_rate * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count >= 2)
round(recorrection_rate * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count >= 2)
count_name_clusters_two_or_more
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
count_name_clusters_more_than_two <- sum(name_clusters$taxon_concept_count > 2)
count_name_clusters_more_than_two
trajectories <- table(name_clusters$trajectory_lumps_splits)
sum(trajectories)
df_trajectories <- data.frame(trajectories)
df_trajectories
round(631/sum(trajectories) * 100, 2)
(sum(trajectories) - 631)
1 + 75 + 6 + 1 + 7 + 1
91/sum(trajectories)
1 + 3 + 75 + 6 + 1 + 7 + 1
94/sum(trajectories)
1 + 3 + 75
79/94
6 + 1 + 7
14/118
44 + 7 + 2 + 1 + 1 + 51 + 3
109/sum(trajectories)
94/sum(trajectories)
44 + 7 + 2 + 1 + 1 + 51 + 3
109/sum(trajectories)
df_trajectories
44
44/109
7 + 2 + 1 + 1
11/109
51 + 3
54/109
2 + 1 + 1 + 3 + 1 + 7
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d,
control = list(
adapt_delta = 0.9
# 1: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
# http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
)
, iter=5000)
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count - 1, # So we fit a true poisson (k=0, 1, 2 ...)
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d,
control = list(
adapt_delta = 0.9
# 1: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
# http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
)
, iter=5000)
model_fit
post <- rstan::extract(model_fit)
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
write.csv(order_measurements, file=paste(sep="", 'tables/table_s4_hmod_order', filename_postfix, '.csv'))
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(id))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
write.csv(genus_measurements, file=paste(sep="", 'tables/table_s6_hmod_genus', filename_postfix, '.csv'))
genus_measurements[genus_measurements$significant == "yes",]
model_fit <- stan('counts_per_name_model.stan', data=stan_d,
control = list(
adapt_delta = 0.95
# 1: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
# http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
)
, iter=5000)
model_fit
post <- rstan::extract(model_fit)
traceplot(model_fit, inc_warmup=T)
lambda_0 <- mean(post$lambda_0)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(id))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
write.csv(genus_measurements, file=paste(sep="", 'tables/table_s6_hmod_genus', filename_postfix, '.csv'))
genus_measurements[genus_measurements$significant == "yes",]
names(genus_measurements[genus_measurements$significant == "yes",])
genus_measurements[genus_measurements$significant == "yes",1]
names(genus_measurements)
nrow(genus_measurements)
count_per_genus
nrow(genus_measurements[genus_measurements$significant == "yes",])/nrow(genus_measurements)
nrow(genus_measurements)
genus_measurements
genus_measurements[0]
genus_measurements[1]
genus_measurements[0,]
genus_measurements[1,]
genus_measurements[,1]
genus_measurements[,0]
genus_measurements$_
# Plot
plot(genus_interval_width ~ count_per_genus$count, ylab="Interval width", xlab="Number of observations per genus", main="5% credible interval widths for number of observations")
rownames_to_column(genus_measurements)
genus_measurements %>% rownames_by_column
genus_measurements %>% rownames_by_column()
row.names(genus_measurements)
genera <- row.names(genus_measurements[genus_measurements$significant == "yes",])
nrow(genera)
length(genera)
name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus in genera,]
for(genus <- genera) {
genus
}
for(genus in genera) {
genus
}
for(genus in genera) {
print(genus)
}
for(genus in genera) {
print(genus, genus)
}
for(genus in genera) {
print(paste(genus, genus))
}
name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]
name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order
levels(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
relevel(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
for(genus in genera) {
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
print(paste(genus, "is in family", families, "and in orders", orders))
}
index <- 0
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
print(paste(genus, "is in family", families, "and in orders", orders))
}
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
}
index <- 0
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
print(orders)
}
order <- c()
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
append(order, orders)
}
table(order)
order <- c()
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
append(order, orders)
}
table(order)
order
name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]
c(10)
c(10, c(10))
order <- c()
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
order <- append(order, orders)
}
order
order <- append(order, str(orders))
order <- append(order, as.character(orders))
order <- c()
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
order <- append(order, as.character(orders))
}
order
table(order)
family <- c()
order <- c()
family <- c()
order <- c()
order <- c()
family <- c()
for(genus in genera) {
index <- index + 1
orders <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$order)
families <- unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
# print(paste(index, ".", genus, "is in family", families, "and in orders", orders))
order <- append(order, as.character(orders))
family <- append(family, as.character(families))
}
order
table(order)
family
table(family)
length(table(order))
length(table(family))
unique(name_clusters_for_hierarchical_modeling[name_clusters_for_hierarchical_modeling$genus == genus,]$family)
unique(name_clusters_for_hierarchical_modeling$family)
length(unique(name_clusters_for_hierarchical_modeling$order))
length(unique(name_clusters_for_hierarchical_modeling$family))
length(table(order))/length(unique(name_clusters_for_hierarchical_modeling$order))
length(table(family))/length(unique(name_clusters_for_hierarchical_modeling$family))
length(table(order))
table(family)
length(table(family))
count_name_clusters_more_than_one
recorrection_rate <- count_name_clusters_more_than_two / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
total_recognized_name_clusters
sum(name_clusters$taxon_concept_count)
splumps_after_1980 <- splumps[splumps$year > 1980,]
splumps_after_1980
splumps_after_1980$reversion_count
summary(splumps_after_1980$reversion_count == 0)
nrow(splumps_after_1980)
52/80

summary(project_stats$binomial_count)
binomial_count_by_year <- tapply(
project_stats$binomial_count,
project_stats$year,
max
)
sort(binomial_count_by_year)
######################################
#### PART 1: Count latest species ####
######################################
latest_aou <- read.csv('../latest_aou_checklist/NACC_list_species_latest.csv')
latest_aou$species_lc <- tolower(latest_aou$species)
LATEST_AOU_COUNT <- length(latest_aou$id)
LATEST_AOU_COUNT
# - 2127
#### Identify when currently recognized species were described ####
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
nrow(original_descs)
# - 2127
summary(original_descs$year)
# - min: 1758, max: 2011
sum(is.na(original_descs$year))
# - 0
original_descs$species_lc <- tolower(original_descs$species)
latest_aou_with_descriptions <- merge(latest_aou, original_descs, by = "species_lc", all.x = TRUE)
nrow(latest_aou_with_descriptions)
# - 2127
# How many blank years?
sum(is.na(latest_aou_with_descriptions$year))
# = 0
sum((latest_aou_with_descriptions$year == ""))
# = 0
# Divide by decade
description_years_by_decade = tapply(latest_aou_with_descriptions$year, floor(latest_aou_with_descriptions$year / 10) * 10, length)
description_years_by_decade
rev(description_years_by_decade)
cumsum(rev(description_years_by_decade))
cumsum(rev(table(latest_aou_with_descriptions$year)))
# - 2127 in total
169/2127
# - 169 since 1889 (7.95%)
198/2127
# - 198 since 1885 (9.3%)
101/2127
# - 101 since 1900 (4.75%)
225/2127
# - 225 since 1880 (10.587%)
round(14/2127*100, 2)
# - 14 since 1950 (0.66%)
# What are the proportions of the species in this study?
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
# - 975? not 976?
name_clusters$species_lc <- tolower(name_clusters$species)
name_clusters$name_lc <- tolower(name_clusters$name)
# This is broken; don't use without fixing!
if(0) {
name_clusters_with_desc <- merge(name_clusters, original_descs, by.x = "name_lc", by.y = "species_lc", all.x = TRUE)
nrow(name_clusters_with_desc)
# - still 974
# Any NAs?
nrow(name_clusters_with_desc)
summary(name_clusters_with_desc$year)
# - 919
# For-now answer
summary(name_clusters_with_desc$year)
name_clusters_years_without_na <- name_clusters_with_desc[which(!is.na(name_clusters_with_desc$year)),]
nrow(name_clusters_years_without_na)
# - 948
cumsum(table(name_clusters_years_without_na$year))
cumsum(rev(table(name_clusters_years_without_na$year)))
# Proportion before 1900
round(21/948 * 100, 2)
# - 2.22%
}
#####################################
#### PART 2: Additions/deletions ####
#####################################
# Note: if we ever actually use these numbers anywhere,
# remember that this INCLUDES NACC_latest -- so the
# additions and deletions are inflated here!
# Note: it also includes aou_1.txt, so that's an awful
# lot of additions right there huh.
supplement_counts <- read.csv("../project_stats/list.csv")
sum(supplement_counts$count_added)
# - 1241 added
sum(supplement_counts$count_deleted)
# - 364 deleted
sum(supplement_counts$count_lump)
# - 117 lumps
sum(supplement_counts$count_split)
# - 85 splits
##############################
#### PART 4: LUMPS/SPLITS ####
##############################
# Load splumps
splumps <- read.csv("../splumps/list.csv")
# How many splumps in total?
summary(splumps$type)
# lump: 117
# split: 85
lumps <- splumps[splumps$type == "lump",]
nrow(lumps)
# - 117 lumps
splits <- splumps[splumps$type == "split",]
nrow(splits)
# - 85 splits
# Quick histogram to show relative coverage
hist(splumps$year)
hist(splumps[splumps$type == "lump",]$year, add=T, col="red")
# How many checklists do we have?
data.frame(supplement_counts$dataset, supplement_counts$year)
years <- unique(sort(supplement_counts$year))
length(years)
# 64 checklists = 57 supplements + 7 major editions - 1 (because aou_1_07 and aou_2 both take place in 1895) + 1 NACC_latest
# Find out counts per year.
library('zoo')
splumps_by_year <- vector()
lumps_by_year <- vector()
splits_by_year <- vector()
for(year in years) {
year_str <- toString(year)
num_splump <- nrow(splumps[splumps$year == year,])
num_lump <- nrow(lumps[lumps$year == year,])
num_split <- nrow(splits[splits$year == year,])
splumps_by_year[year_str] <- num_lump + num_split
lumps_by_year[year_str] <- num_lump
splits_by_year[year_str] <- num_split
}
zoo_splumps <- zoo(splumps_by_year, years)
zoo_lumps <- zoo(lumps_by_year, years)
zoo_splits <- zoo(splits_by_year, years)
length(zoo_splumps)
sum(zoo_splumps)
length(zoo_lumps)
sum(zoo_lumps)
length(zoo_splits)
sum(zoo_splits)
# Can we compensate for the number of recognized species in each case?
summary(supplement_counts$binomial_count)
binomial_count_by_year <- tapply(
supplement_counts$binomial_count,
supplement_counts$year,
max
)
sort(binomial_count_by_year)
# min: 769 in 1982
# max: 976 in 2015
zoo_binomial_count_by_year <- zoo(binomial_count_by_year, names(binomial_count_by_year))
# Checklists with zero splumps
splumps_by_year_with_zero <- splumps_by_year[splumps_by_year == 0]
length(splumps_by_year_with_zero)
# 12 checklists, including 1886 and 2017, which shouldn't count
splumps_by_year_with_zero
#### FIGURE 1a. Bar graph of lumps and splits with cumulative curves ####
library(Hmisc)
start_export('cumul_lumps_and_splits_bargraph', width=1000, height=600)
max_ylim <- max(sum(zoo_lumps), sum(zoo_splits))
par(mfrow=c(1, 1), cex=overall_cex*0.7)
plot(cumsum(zoo_lumps),
ylim=c(0, max_ylim),
col=2,
ylab="Number of changes",
xlab="Year"
# main="Cumulative lumps and splits from 1889 to 2016"
)
minor.tick(nx=10, ny=0)
par(new=T)
#plot(cumsum(zoo_lumps), ylim=c(0, sum(zoo_lumps)), col=2, ylab=NA, xlab=NA, axes=F)
#points(zoo_lumps, col=2, pch=4)
rect(
as.integer(names(zoo_lumps)) - 0.5,
rep(0, length(zoo_lumps)),
as.integer(names(zoo_lumps)),
zoo_lumps,
col=2
# , border=2
)
par(new=T)
plot(cumsum(zoo_splits), ylim=c(0, max_ylim), col=4, ylab=NA, xlab=NA)
rect(
as.integer(names(zoo_splits)),
rep(0, length(zoo_splits)),
as.integer(names(zoo_splits)) + 0.5,
zoo_splits,
col=4
# , border=4
)
#points(zoo_splits, col=4, pch=4)
# Annotations!
if(0) {
# Add lines for all the places where committees had a major change.
years_committees_changed_bigs <- c(
1891, 1892, 1894, 1901, 1902, 1920, 1931, 1944, 1954, 1957, 1973, 1976, 1985, 2000
)
length(years_committees_changed_bigs)
abline(v=years_committees_changed_bigs, col="black", lty=2)
}
# Finish
legend("topleft",
lty=c(1, 1),
col=c(2, 4),
legend=c("Lumps", "Splits")
)
dev.off()
par(mfrow=c(1, 1), cex=overall_cex)
lagged <- c(0, lag(zoo_splumps, k=-1))
lagged
plot(log(zoo_splumps), log(lagged))
?lag
lag(zoo_splumps, k=-1)
lagged
plot(log(zoo_splumps), log(lagged))
cor.test(zoo_splumps, lagged)
start_export('gaps', height=1600, width=1800)
par(mfrow=c(3, 1), cex=overall_cex)
zoo_splumps
zoo_lumps + zoo_splits
zoo_splumps
splump_years <- as.integer(names(zoo_splumps))
splump_gaps <- c(splump_years, 2017) - c(0, splump_years)
splump_gaps
splump_gaps[1] <- NA
splump_gaps <- splump_gaps[1:(length(splump_gaps) - 1)]
gap_analysis <- data.frame(
year = names(zoo_splumps[2:(length(zoo_splumps))]),
gap = splump_gaps[2:(length(splump_gaps))],
splumps = zoo_splumps[2:(length(zoo_splumps))],
splits = zoo_splits[2:(length(zoo_splits))],
lumps = zoo_lumps[2:(length(zoo_lumps))]
)
gap_analysis
plot(gap_analysis$splumps ~ gap_analysis$gap,
main = "Lumps and splits",
xlab = "Gap (years)",
ylab = "Number of changes"
)
gap_model_splumps <- lm(gap_analysis$splumps ~ gap_analysis$gap)
summary(gap_model_splumps)
abline(gap_model_splumps, lty=2)
plot(gap_analysis$lumps ~ gap_analysis$gap,
main = "Lumps only",
xlab = "Gap (years)",
ylab = "Number of changes"
)
gap_model_lump <- lm(gap_analysis$lumps ~ gap_analysis$gap)
summary(gap_model_lump)
abline(gap_model_lump, lty=2)
plot(gap_analysis$splits ~ gap_analysis$gap,
main = "Splits only",
xlab = "Gap (years)",
ylab = "Number of changes"
)
gap_model_splits <- lm(gap_analysis$splits ~ gap_analysis$gap)
summary(gap_model_splits)
abline(gap_model_splits, lty=2)
dev.off()
par(mfrow=c(1, 1), cex=overall_cex)
final_year <- 2016
offset <- 7
period <- 10
lumps_by_decade <- tapply(lumps$type, floor((lumps$year - offset) / period) * period + offset, length)
lumps_by_decade
lumps_by_decade["1957"] = 0
lumps_by_decade["1987"] = 0
lumps_by_decade <- lumps_by_decade[order(names(lumps_by_decade))]
names_lumps_by_decade <- paste(names(lumps_by_decade), "-", as.integer(names(lumps_by_decade)) + period - 1, sep="")
names_lumps_by_decade[1] <- "1889-1896"
lumps_by_decade
splits_by_decade <- tapply(splits$type, floor((splits$year - offset) / period) * period + offset, length)
splits_by_decade <- splits_by_decade[order(names(splits_by_decade))]
splits_by_decade
splits_by_decade["1917"] = 0
splits_by_decade["1957"] = 0
splits_by_decade <- splits_by_decade[order(names(splits_by_decade))]
names_splits_by_decade <- paste(names(splits_by_decade), "-", as.integer(names(splits_by_decade)) + period - 1, sep="")
names_splits_by_decade[1] <- "1889-1896"
names(splits_by_decade) <- names_splits_by_decade
splits_by_year
splits_by_decade
start_export(
paste("splumps_by_decade", sep=""),
width=1200,
height=800)
par(cex=overall_cex*1.2)
barplot(rbind(lumps_by_decade, splits_by_decade), beside=T,
col=rep(c(2, 4), length(lumps_by_decade)),
ylab="Number of lumps or splits",
xlab="Decade"
)
legend("topleft",
col=c(2, 4),
pch=c(15, 15),
legend=c("Lumps", "Splits")
)
dev.off()
par(cex=overall_cex)
splumps_by_checklist <- tapply(
splumps$id,
splumps$year,
length
)
sort(splumps_by_checklist)
lumps_by_checklist <- tapply(
lumps$id,
lumps$year,
length
)
sort(lumps_by_checklist)
splits_by_checklist <- tapply(
splits$id,
splits$year,
length
)
sort(splits_by_checklist)
sum(splits_by_year)
splits_by_year[names(splits_by_year) >= 1982]
sum(splits_by_year[names(splits_by_year) >= 1982])
pc_splits_after_1982 <- sum(splits_by_year[names(splits_by_year) >= 1982])/sum(splits_by_year) * 100
round(pc_splits_after_1982, 2)
sum(splits_by_year[names(splits_by_year) >= 1980])
round(100 - pc_splits_after_1982, 2)
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
length(table(taxon_concepts$name_cluster_id))
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
summary(name_clusters$taxon_concept_count)
sum(is.na(name_clusters$taxon_concept_count))
sum(name_clusters$taxon_concept_count)
sort(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]
name_clusters[name_clusters$taxon_concept_count == max(name_clusters$taxon_concept_count),]
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
summary(taxon_concepts_per_name)
name_clusters$taxon_concept_count
sum(name_clusters$taxon_concept_count)
total_recognized_name_clusters = nrow(name_clusters)
total_recognized_name_clusters
count_name_clusters_one_or_more <- sum(name_clusters$taxon_concept_count > 1)
count_name_clusters_one_or_more
correction_rate <- count_name_clusters_one_or_more / total_recognized_name_clusters
round(correction_rate * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count > 2)
count_name_clusters_two_or_more
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
splumps <- read.csv("../splumps/list.csv")
nrow(splumps)
summary(splumps$type)
lumps <- splumps[splumps$type == "lump",]
nrow(lumps)
nrow(splits)
(splumps$perfect_reversion_count == 1)
sum(lumps$reversion_count >= 1)
reversion_pc_lumps = sum(lumps$reversion_count >= 1)/nrow(lumps)
round(reversion_pc_lumps * 100, 2)
sum(splits$reversion_count >= 1)
reversion_pc_splits = sum(splits$reversion_count >= 1)/nrow(splits)
round(reversion_pc_splits * 100, 2)
sum(lumps$perfect_reversion_count >= 1)
perfect_reversion_pc_lumps = sum(lumps$perfect_reversion_count >= 1)/nrow(lumps)
round(perfect_reversion_pc_lumps * 100, 2)
sum(splits$perfect_reversion_count >= 1)
perfect_reversion_pc_splits = sum(splits$perfect_reversion_count >= 1)/nrow(splits)
sum(splumps$reversion_count >= 1)
round(perfect_reversion_pc_splits * 100, 2)
sum(splumps$reversion_count >= 1)
reversion_pc_splumps = sum(splumps$reversion_count >= 1)/nrow(splumps)
round(reversion_pc_splumps * 100, 2)
sum(splumps$perfect_reversion_count >= 1)
perfect_reversion_pc_splumps = sum(splumps$perfect_reversion_count >= 1)/nrow(splumps)
round(perfect_reversion_pc_splumps * 100, 2)
if(0) {
lumps_not_reverting_anything <- lumps[lumps$reversion_count == 0,]
nrow(lumps_not_reverting_anything)
# - 75 lumps
# Proportion of all lumps
round(nrow(lumps_not_reverting_anything)/nrow(lumps) * 100, 2)
# - 65.22%
lumps_with_reversions <- lumps[lumps$reversion_count > 0,]
nrow(lumps_with_reversions)
# - 40 lumps
# Of these 39 lumps, what proportion of them are reverting a previous split?
lumps_with_reversions_reverting_previous <- lumps_with_reversions[lumps_with_reversions$reverts_a_previous_change == "yes",]
nrow(lumps_with_reversions_reverting_previous)
# - 10 lumps
# Proportion of all lumps
round(nrow(lumps_with_reversions_reverting_previous)/nrow(lumps) * 100, 2)
# - 8.7%
# Proportion of lumps that have not yet been reverted
count_lumps_never_reverted <-
nrow(lumps_not_reverting_anything) +
nrow(lumps_with_reversions[lumps_with_reversions$reverts_all_previous_changes == "yes",])
count_lumps_never_reverted
# - 81
round(count_lumps_never_reverted/nrow(lumps) * 100, 2)
# - 70.43%
splits_not_reverting_anything <- splits[splits$reversion_count == 0,]
nrow(splits_not_reverting_anything)
# - 47 splits
# Proportion of all splits
round(nrow(splits_not_reverting_anything)/nrow(splits) * 100, 2)
# - 55.95%
splits_with_reversions <- splits[splits$reversion_count > 0,]
nrow(splits_with_reversions)
# - 37 splits
# Of these 36 splits, what proportion of them are reverting a previous lump?
splits_with_reversions_reverting_previous <- splits_with_reversions[splits_with_reversions$reverts_a_previous_change == "yes",]
nrow(splits_with_reversions_reverting_previous)
# - 31 splits
# Proportion of splits that have not yet been reverted
count_splits_never_reverted <-
nrow(splits_not_reverting_anything) +
nrow(splits_with_reversions[splits_with_reversions$reverts_all_previous_changes == "yes",])
count_splits_never_reverted
# - 76
round(count_splits_never_reverted/nrow(splits) * 100, 2)
# - 90.48%
# Proportion of all splits
round(nrow(splits_with_reversions_reverting_previous)/nrow(splits) * 100, 2)
# - 36.9%
# Interestingly, we can also figure this out by looking at splumps that revert all previous changes -- since technically those
# that have no reversions also revert all previous!
nrow(lumps[lumps$reverts_all_previous_changes == "yes",])
# - 81 = 75 lumps not reverting anything + 10 lumps reverting a previous split
# DISCREPENCY!!! Expected 81, got 81 (so is this no longer a problem?)
nrow(splits[splits$reverts_all_previous_changes == "yes",])
# - 76 = ???
# DISCREPENCY!!! Expected 81, got 83 (+2)
# We can do the same with perfect reversions.
lumps_not_perfectly_reverting_anything <- lumps[lumps$perfect_reversion_count == 0,]
nrow(lumps_not_perfectly_reverting_anything)
# - 94 lumps
lumps_with_perfect_reversions <- lumps[lumps$perfect_reversion_count > 0,]
nrow(lumps_with_perfect_reversions)
# - 21 lumps
# Proportion of all lumps
round(nrow(lumps_with_perfect_reversions)/nrow(lumps) * 100, 2)
# - 18.26%
# Of these 21 lumps, what proportion of them are reverting a previous split?
lumps_with_perfect_reversions_reverting_previous <- lumps_with_perfect_reversions[lumps_with_perfect_reversions$perfectly_reverts_a_previous_change == "yes",]
nrow(lumps_with_perfect_reversions_reverting_previous)
# - 7 lumps
# Proportion of all lumps
round(nrow(lumps_with_perfect_reversions_reverting_previous)/nrow(lumps) * 100, 2)
# - 6.09%
count_lumps_never_perfectly_reverted <-
nrow(lumps_not_perfectly_reverting_anything) +
nrow(lumps_with_perfect_reversions[lumps_with_perfect_reversions$reverts_all_previous_changes == "yes",])
count_lumps_never_perfectly_reverted
# - 99
round(count_lumps_never_perfectly_reverted/nrow(lumps) * 100, 2)
# - 86.09%
splits_not_perfectly_reverting_anything <- splits[splits$perfect_reversion_count == 0,]
nrow(splits_not_perfectly_reverting_anything)
# - 64 splits
splits_with_perfect_reversions <- splits[splits$perfect_reversion_count > 0,]
nrow(splits_with_perfect_reversions)
# - 20 splits
# Of these 20 splits, what proportion of them are reverting a previous lump?
splits_with_perfect_reversions_reverting_previous <- splits_with_perfect_reversions[splits_with_perfect_reversions$perfectly_reverts_a_previous_change == "yes",]
nrow(splits_with_perfect_reversions_reverting_previous)
# - 15 splits
count_splits_never_perfectly_reverted <-
nrow(splits_not_perfectly_reverting_anything) +
nrow(splits_with_perfect_reversions[splits_with_perfect_reversions$reverts_all_previous_changes == "yes",])
count_splits_never_perfectly_reverted
# - 78
round(count_splits_never_perfectly_reverted/nrow(splits) * 100, 2)
# - 92.86%
# Interestingly, we can also figure this out by looking at splumps that revert all previous changes -- since technically those
# that have no reversions also revert all previous!
nrow(lumps[lumps$perfectly_reverts_all_previous_changes == "yes",])
# - 99 =
# ??? 93 lumps not reverting anything + 7 lumps reverting a previous split
# ??? DISCREPENCY!!! Expected 98, got 100
nrow(splits[splits$perfectly_reverts_all_previous_changes == "yes",])
# - 78
# ??? = 69 splits not reverting anything + 15 splits reverting a previous split
# ??? DISCREPENCY!!! Expected 83, got 84
# Okay, so what's the important summary here?
# - Proportion of lumps that revert previous splits:
nrow(splits_with_reversions_reverting_previous)/nrow(splits)
(nrow(splits_with_reversions) - nrow(splits_with_reversions_reverting_previous))/nrow(splits)
# ???
}
lumps_with_perfect_reversions <- lumps[lumps$perfect_reversion_count >= 1,]
lumps_with_perfect_reversions
nrow(lumps_with_perfect_reversions)
perfect_lumps <- factor(lumps_with_perfect_reversions$perfect_reversions_summary)
table(perfect_lumps)
splits_with_perfect_reversions <- splits[splits$perfect_reversion_count >= 1,]
splits_with_perfect_reversions
nrow(splits_with_perfect_reversions)
perfect_splits <- factor(splits_with_perfect_reversions$perfect_reversions_summary)
table(perfect_splits)
perfect_splumps <- splumps[splumps$perfect_reversion_count >= 1,]
perfect_reversion_table <- table(factor(perfect_splumps$perfect_reversions_summary))
perfect_reversion_table
perfect_reversions <- names(perfect_reversion_table)
count_total_perfect_reversions <- length(perfect_reversions)
count_total_perfect_reversions
count_lump_split_lump <- 1

name_clusters$name
name_clusters$name == "Rallus obsoletus"
which(name_clusters$name == "Rallus obsoletus")
which(table(name_clusters$name) > 1)
name_clusters[which(name_clusters$name == "Rallus obsoletus "),]
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
which(table(name_clusters$name) > 1)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
which(table(name_clusters$name) > 1)
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
which(table(name_clusters$name) > 1)
name_clusters[which(name_clusters$name == "Rallus obsoletus "),]
round(mean(name_clusters$taxon_concept_count), 3)
sd(name_clusters$taxon_concept_count)
sd(name_clusters$taxon_concept_count)/length(name_clusters$taxon_concept_count)
summary(name_clusters$taxon_concept_count > 1)
start_export('hist_definition_counts')
par(cex=overall_cex*1.2)
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
dev.off()
par(cex=overall_cex)
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts[5] <- 0
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
table_taxon_concept_counts
table_taxon_concept_counts[5]
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts[6] <- table_taxon_concept_counts[5]
table_taxon_concept_counts
name(table_taxon_concept_counts[5]) <- 5
name(table_taxon_concept_counts[5]) <- "5"
names(table_taxon_concept_counts[5]) <- "5"
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts[6] <- table_taxon_concept_counts[5]
names(table_taxon_concept_counts[5]) <- "5"
table_taxon_concept_counts
names(table_taxon_concept_counts[5]) <- 5
names(table_taxon_concept_counts[6]) <- 6
table_taxon_concept_counts
table_taxon_concept_counts[5] <- 0
names(table_taxon_concept_counts[6]) <- 6
table_taxon_concept_counts
names(table_taxon_concept_counts[5]) <- "5"
table_taxon_concept_counts[5] <- 0
names(table_taxon_concept_counts[5]) <- c("5")
names(table_taxon_concept_counts[6]) <- c("6")
table_taxon_concept_counts
1:max(name_clusters$taxon_concept_count)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count, dnn=1:max(name_clusters$taxon_concept_count))
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count, row.names=1:max(name_clusters$taxon_concept_count))
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count, stringsAsFactors = FALSE)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count, stringsAsFactors=FALSE)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
dev.off()
length(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]$name
sum(name_clusters$taxon_concept_count == 0)
pc_single_defn <- sum(name_clusters$taxon_concept_count == 1)/nrow(name_clusters)
round(pc_single_defn * 100, 3)
length(unique(factor(name_clusters$order)))
summary(is.na(name_clusters$order))
which(is.na(name_clusters$order))
name_clusters[which(is.na(name_clusters$order)),]$name
name_clusters_for_hierarchical_modeling <- name_clusters[-which(is.na(name_clusters$order)),]
name_clusters_for_hierarchical_modeling
nrow(name_clusters_for_hierarchical_modeling)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
summary(name_clusters_for_hierarchical_modeling$order)
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
name_clusters[is.na(name_clusters$genus),]$name
counts_per_name$years_in_list <- 2017 - counts_per_name$first_added_year
name_clusters_for_hierarchical_modeling
counts_per_name <- tapply(name_clusters_for_hierarchical_modeling$id, factor(name_clusters_for_hierarchical_modeling$name), length)
counts_per_name
counts_per_name <- tapply(name_clusters_for_hierarchical_modeling$taxon_concept_count, factor(name_clusters_for_hierarchical_modeling$name), sum)
counts_per_name
sum(counts_per_name)
counts_per_name
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
which(table(name_clusters$name) > 1)
name_clusters[which(name_clusters$name == "Rallus obsoletus "),]
round(mean(name_clusters$taxon_concept_count), 3)
sd(name_clusters$taxon_concept_count)
summary(name_clusters$taxon_concept_count > 1)
start_export('hist_definition_counts')
par(cex=overall_cex*1.2)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
dev.off()
par(cex=overall_cex)
length(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]$name
sum(name_clusters$taxon_concept_count == 0)
pc_single_defn <- sum(name_clusters$taxon_concept_count == 1)/nrow(name_clusters)
round(pc_single_defn * 100, 3)
length(unique(factor(name_clusters$order)))
summary(is.na(name_clusters$order))
name_clusters[which(is.na(name_clusters$order)),]$name
name_clusters_for_hierarchical_modeling <- name_clusters[-which(is.na(name_clusters$order)),]
nrow(name_clusters_for_hierarchical_modeling)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
name_clusters_for_hierarchical_modeling$years_in_list <- name_clusters_for_hierarchical_modeling$
counts_per_name$years_in_list <- 2017 - counts_per_name$first_added_year
tapply(counts_per_name$years_in_list, counts_per_name$years_in_list, length)
summary(name_clusters_for_hierarchical_modeling$years_in_list)
summary(name_clusters_for_hierarchical_modeling$first_added_year)
sum(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
summary(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
name_clusters_for_hierarchical_modeling$years_in_list
hist(name_clusters_for_hierarchical_modeling$years_in_list)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(counts_per_name),
norder = length(levels(counts_per_name$order)),
nfamily = length(levels(counts_per_name$family)),
ngenus = length(levels(counts_per_name$genus)),
y = counts_per_name$definition_count,
order = as.integer(counts_per_name$order),
family = as.integer(counts_per_name$family),
genus = as.integer(counts_per_name$genus),
years_in_list = counts_per_name$years_in_list
)
levels(counts_per_name$order)
stan_d
stan_d <- list(
nobs = nrow(counts_per_name),
norder = length(levels(counts_per_name$order)),
nfamily = length(levels(counts_per_name$family)),
ngenus = length(levels(counts_per_name$genus)),
y = counts_per_name$definition_count,
order = as.integer(counts_per_name$order),
family = as.integer(counts_per_name$family),
genus = as.integer(counts_per_name$genus),
years_in_list = counts_per_name$years_in_list
)
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
stan_d
nrow(name_clusters_for_hierarchical_modeling)
length(levels(name_clusters_for_hierarchical_modeling$order))
length(levels(name_clusters_for_hierarchical_modeling$family))
length(levels(name_clusters_for_hierarchical_modeling$genus))
name_clusters_for_hierarchical_modeling$taxon_concept_count
as.integer(name_clusters_for_hierarchical_modeling$order)
as.integer(name_clusters_for_hierarchical_modeling$family)
as.integer(name_clusters_for_hierarchical_modeling$genus)
name_clusters_for_hierarchical_modeling$years_in_list
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
model_fit
min(model_fit$Rhat)
post <- rstan::extract(model_fit)
traceplot(model_fit, inc_warmup=T)
install.package("rstan")
install.packages("rstan")
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- ''
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- counts_per_name %>% group_by(order) %>% summarize(count = length(species))
count_per_order <- counts_per_name %>% group_by(order) %>% summarize(count = length(name))
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(name))
count_per_order
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
# count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
write.csv(order_measurements, file=paste(sep="", '../tables/table_s4_hmod_order', filename_postfix, '.csv'))
write.csv(order_measurements, file=paste(sep="", 'tables/table_s4_hmod_order', filename_postfix, '.csv'))
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(name))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
# count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements
write.csv(family_measurements, file=paste(sep="", 'tables/table_s5_hmod_family', filename_postfix, '.csv'))
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(species))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
# count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
write.csv(order_measurements, file=paste(sep="", 'tables/table_s4_hmod_order', filename_postfix, '.csv'))
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements
write.csv(family_measurements, file=paste(sep="", 'tables/table_s5_hmod_family', filename_postfix, '.csv'))
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(id))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
write.csv(genus_measurements, file=paste(sep="", '../tables/table_s6_hmod_genus', filename_postfix, '.csv'))
write.csv(genus_measurements, file=paste(sep="", 'tables/table_s6_hmod_genus', filename_postfix, '.csv'))
plot(genus_interval_width ~ count_per_genus$count, ylab="Interval width", xlab="Number of observations per genus", main="5% credible interval widths for number of observations")
getwd()
FLAG_PRE1982 <- T
OUTPUT_SCREEN <- F
OUTPUT_PNG <- T
overall_cex = 1.7
par(cex = overall_cex)
if(OUTPUT_SCREEN) { start_export <- function(fn, width=1000, height=700) { return(NA) }
} else if(OUTPUT_PNG) { extension <- 'png'; start_export <- function(fn, width=1000, height=700) { png(get_filename(fn), width=width, height=height, units="px") }
} else { extension <- 'pdf'; start_export <- function(fn, width=1500, height=1050) {
if(width == 1500 && height == 1050) {
pdf(get_filename(fn))
} else {
# Converting width/height to inches at 150dpi
pdf(get_filename(fn), width=width/100, height=height/100)
}
}}
if(FLAG_PRE1982) { get_filename <- function(fn) { return(paste("graphs/pre1982_species/", fn, ".", extension, sep="")); }
} else get_filename <- function(fn) { return(paste("graphs/all_species/", fn, ".", extension, sep="")); }
latest_aou <- read.csv('../latest_aou_checklist/NACC_list_species_latest.csv')
latest_aou$species_lc <- tolower(latest_aou$species)
LATEST_AOU_COUNT <- length(latest_aou$id)
LATEST_AOU_COUNT
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
summary(original_descs$year)
sum(is.na(original_descs$year))
original_descs$species_lc <- tolower(original_descs$species)
latest_aou_with_descriptions <- merge(latest_aou, original_descs, by = "species_lc", all.x = TRUE)
nrow(latest_aou_with_descriptions)
sum(is.na(latest_aou_with_descriptions$year))
sum((latest_aou_with_descriptions$year == ""))
description_years_by_decade = tapply(latest_aou_with_descriptions$year, floor(latest_aou_with_descriptions$year / 10) * 10, length)
description_years_by_decade
rev(description_years_by_decade)
cumsum(rev(description_years_by_decade))
101/2127
225/2127
round(14/2127*100, 2)
supplement_counts <- read.csv("../project_stats/list.csv")
sum(supplement_counts$count_added)
sum(supplement_counts$count_deleted)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
name_clusters$name
name_clusters$species
name_clusters$species_lc
name_clusters$species_lc <- tolower(name_clusters$species)
name_clusters_with_desc <- merge(name_clusters, original_descs, by = "species_lc", all.x = TRUE)
nrow(latest_aou_with_descriptions)
nrow(name_clusters_with_desc)
name_clusters_with_desc$year
which.na(name_clusters_with_desc$year)
which(is.na(name_clusters_with_desc$year))
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$name
nrow(original_descs)
name_clusters$name_lc <- tolower(name_clusters$name)
name_clusters_with_desc <- merge(name_clusters, original_descs, by = "name_lc", all.x = TRUE)
nrow(name_clusters_with_desc)
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$name
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$species
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$species.x
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$species.y
name_clusters_with_desc[which(is.na(name_clusters_with_desc$year)),]$name
summary(name_clusters_with_desc$year)
name_clusters_years_without_na <- name_clusters_with_desc[which(!is.na(name_clusters_with_desc$year)),]
nrow(name_clusters_years_without_na)
summary(name_clusters_years_without_na$year)
sort(name_clusters_years_without_na$year)
table(name_clusters_years_without_na$year)
cumsum(table(name_clusters_years_without_na$year))
cumsum(rev(table(name_clusters_years_without_na$year)))
21/948
round(21/948, 2)
round(21/948 * 100, 2)
getwd()
FLAG_PRE1982 <- T
OUTPUT_SCREEN <- F
OUTPUT_PNG <- T
overall_cex = 1.7
par(cex = overall_cex)
if(OUTPUT_SCREEN) { start_export <- function(fn, width=1000, height=700) { return(NA) }
} else if(OUTPUT_PNG) { extension <- 'png'; start_export <- function(fn, width=1000, height=700) { png(get_filename(fn), width=width, height=height, units="px") }
} else { extension <- 'pdf'; start_export <- function(fn, width=1500, height=1050) {
if(width == 1500 && height == 1050) {
pdf(get_filename(fn))
} else {
# Converting width/height to inches at 150dpi
pdf(get_filename(fn), width=width/100, height=height/100)
}
}}
if(FLAG_PRE1982) { get_filename <- function(fn) { return(paste("graphs/pre1982_species/", fn, ".", extension, sep="")); }
} else get_filename <- function(fn) { return(paste("graphs/all_species/", fn, ".", extension, sep="")); }
latest_aou <- read.csv('../latest_aou_checklist/NACC_list_species_latest.csv')
latest_aou$species_lc <- tolower(latest_aou$species)
LATEST_AOU_COUNT <- length(latest_aou$id)
LATEST_AOU_COUNT
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
nrow(original_descs)
#
# ANALYSIS FOR THE AOU PAPER BY YEAR (September 29, 2016)
#
# This analysis file includes instructions for both full analyses as well
# as pre-1982 analyses. Set the FLAG_PRE1982 = T if you would like to
# perform this analysis; otherwise, set FLAG_PRE1982 = F
#
getwd()
# - TODO: Note that we do have multiple checklists within the same year
# sometimes, so make sure all our per-year measurements account for that.
# - TODO: pre-1982 or pre-1983? We've standardized to pre-1982 for now, but
# maybe the other one makes more sense?
#
# There is a convenience setup that controls where the output of this script
# goes. If OUTPUT_SCREEN is set to T, then the output will be displayed in R
# itself. If set to F, the output will be written to a PDF file -- unless
# OUTPUT_PNG is set to T, in which case it will be written to a PNG file. By
# running the script one way and then another, it is straightforward to
# generate every possible output.
#
FLAG_PRE1982 <- T
OUTPUT_SCREEN <- F
OUTPUT_PNG <- T
# If OUTPUT_PNG is false, we output as PDF instead.
# overall_cex = 1.7 for paper
# Makes the graph legends better.
overall_cex = 1.7
par(cex = overall_cex)
# In this section, the options above are translated into three functions:
#   - start_export('filename') => start exporting to a PNG or PDF, or do nothing if OUTPUT_SCREEN is set
#       (there is no 'end_export()'; just call dev.off() once you're done)
#   - get_filename('filename') => get a filename for the output file, with the right extension and in
#       the right folder ('pre1982_species' if FLAG_PRE1982, else 'all_species')
#
if(OUTPUT_SCREEN) { start_export <- function(fn, width=1000, height=700) { return(NA) }
} else if(OUTPUT_PNG) { extension <- 'png'; start_export <- function(fn, width=1000, height=700) { png(get_filename(fn), width=width, height=height, units="px") }
} else { extension <- 'pdf'; start_export <- function(fn, width=1500, height=1050) {
if(width == 1500 && height == 1050) {
pdf(get_filename(fn))
} else {
# Converting width/height to inches at 150dpi
pdf(get_filename(fn), width=width/100, height=height/100)
}
}}
if(FLAG_PRE1982) { get_filename <- function(fn) { return(paste("graphs/pre1982_species/", fn, ".", extension, sep="")); }
} else get_filename <- function(fn) { return(paste("graphs/all_species/", fn, ".", extension, sep="")); }
######################################
#### PART 1: Count latest species ####
######################################
latest_aou <- read.csv('../latest_aou_checklist/NACC_list_species_latest.csv')
latest_aou$species_lc <- tolower(latest_aou$species)
LATEST_AOU_COUNT <- length(latest_aou$id)
LATEST_AOU_COUNT
# - 2127
#### Identify when currently recognized species were described ####
original_descs <- read.csv('../original_descriptions/original_descriptions.csv')
nrow(original_descs)
# - 2127
summary(original_descs$year)
# - min: 1758, max: 2011
sum(is.na(original_descs$year))
# - 0
original_descs$species_lc <- tolower(original_descs$species)
latest_aou_with_descriptions <- merge(latest_aou, original_descs, by = "species_lc", all.x = TRUE)
nrow(latest_aou_with_descriptions)
# - 2127
# How many blank years?
sum(is.na(latest_aou_with_descriptions$year))
# = 0
sum((latest_aou_with_descriptions$year == ""))
# = 0
# Divide by decade
description_years_by_decade = tapply(latest_aou_with_descriptions$year, floor(latest_aou_with_descriptions$year / 10) * 10, length)
description_years_by_decade
rev(description_years_by_decade)
cumsum(rev(description_years_by_decade))
cumsum(rev(latest_aou_with_descriptions$year))
cumsum(rev(table(latest_aou_with_descriptions$year)))
169/2127

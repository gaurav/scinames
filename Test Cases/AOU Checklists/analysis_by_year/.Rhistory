write.csv(data.frame(table(perfect_splumps$perfect_reversions_summary)), "graphs/perfect_reversions_summary.csv")
write.csv(data.frame(table(perfect_splumps$perfect_reversions_summary)), "tables/perfect_reversions_summary.csv")
count_total = count_lump_split_lump + count_split_lump_split + count_lump_split + count_split_lump
count_split_lump_split <- 2
count_lump_split_lump <- 1
count_split_lump_split <- 2
count_lump_split <- 35
count_split_lump <- 10
count_total = count_lump_split_lump + count_split_lump_split + count_lump_split + count_split_lump
35/45
10/45
binom.test(c(count_lump_split, count_split_lump))
actual_lump_split <- count_lump_split
actual_split_lump <- count_split_lump
expected_lump_split <- (count_lump_lump + count_lump_split)
expected_split_lump <- (count_split_lump + count_split_split)
fisher.test(
matrix(data = c(actual_lump_split, expected_lump_split, actual_split_lump, expected_split_lump), nrow = 2, ncol = 2)
)
nrow(splits)/nrow(splumps)
actual_lump_split <- count_lump_split
actual_split_lump <- count_split_lump
expected_lump_split <- nrow(splits)
expected_split_lump <- nrow(lumps)
fisher.test(
matrix(data = c(actual_lump_split, expected_lump_split, actual_split_lump, expected_split_lump), nrow = 2, ncol = 2)
)
total_actual <- actual_lump_split + actual_split_lump
total_expected <- expected_lump_split + expected_split_lump
splumps <- read.csv("../splumps/list.csv")
nrow(splumps)
summary(splumps$type)
lumps <- splumps[splumps$type == "lump",]
splits <- splumps[splumps$type == "split",]
nrow(lumps)
nrow(splits)
sum(splits$perfect_reversion_count > 0)
pc_splits_perfectly_reverting_lumps <- sum(splits$perfect_reversion_count > 0)/nrow(splits) * 100
round(pc_splits_perfectly_reverting_lumps, 2)
splits_since_1980 <- splits[splits$year >= 1980,]
nrow(splits_since_1980)
splits_since_1980$year
sum(splits_since_1980$perfect_reversion_count > 0)
pc_splits_perfectly_reverting_lumps_since_1980 <- sum(splits_since_1980$perfect_reversion_count > 0)/nrow(splits_since_1980) * 100
round(pc_splits_perfectly_reverting_lumps_since_1980, 2)
splits_since_1950 <- splits[splits$year >= 1950,]
nrow(splits_since_1950)
splits_since_1950$year
splits_since_1950$year
sum(splits_since_1950$perfect_reversion_count > 0)
pc_splits_reverting_lumps_since_1950 <- sum(splits_since_1950$perfect_reversion_count > 0)/nrow(splits_since_1950) * 100
sum(splits_since_1980$perfect_reversion_count > 0)
splits_since_1950 <- splits[splits$year >= 1950,]
pc_splits_perfectly_reverting_lumps_since_1980 <- sum(splits_since_1980$perfect_reversion_count > 0)/nrow(splits_since_1980) * 100
round(pc_splits_perfectly_reverting_lumps_since_1980, 2)
splits_since_1950 <- splits[splits$year >= 1950,]
nrow(splits_since_1950)
splits_since_1950$year
sum(splits_since_1950$perfect_reversion_count > 0)
pc_splits_reverting_lumps_since_1950 <- sum(splits_since_1950$perfect_reversion_count > 0)/nrow(splits_since_1950) * 100
round(pc_splits_reverting_lumps_since_1950, 2)
sum(splits_since_1980$reversion_count > 0)
pc_splits_reverting_lumps_since_1980 <- sum(splits_since_1980$reversion_count > 0)/nrow(splits_since_1980) * 100
round(pc_splits_reverting_lumps_since_1980, 2)
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
name_clusters_all <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters_all)
sum(table(name_clusters_all$name) > 1)
name_clusters <- name_clusters_all[name_clusters_all$taxon_concept_count > 0,]
nrow(name_clusters)
summary(name_clusters$order)
name_clusters_no_extralimitals <- name_clusters[!is.na(name_clusters$order),]
nrow(name_clusters_no_extralimitals)
nrow(name_clusters)
862 - 833
nrow(name_clusters)
name_clusters_all[name_clusters_all$taxon_concept_count == 0,]$name
name_clusters_no_extralimitals <- name_clusters[!is.na(name_clusters$order),]
nrow(name_clusters_no_extralimitals)
862 - 833
round(mean(name_clusters$taxon_concept_count), 3)
sd(name_clusters$taxon_concept_count)
round(mean(name_clusters_no_extralimitals$taxon_concept_count), 3)
sd(name_clusters_no_extralimitals$taxon_concept_count)
summary(name_clusters_no_extralimitals$taxon_concept_count > 1)
start_export('hist_definition_counts')
par(cex=overall_cex*1.2)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts
table_taxon_concept_counts <- table(name_clusters_no_extralimitals$taxon_concept_count)
table_taxon_concept_counts
table_taxon_concept_counts
table_taxon_concept_counts
table_taxon_concept_counts
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
dev.off()
par(cex=overall_cex)
length(name_clusters$taxon_concept_count)
length(name_clusters_no_extralimitals$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]$name
sum(name_clusters$taxon_concept_count == 0)
pc_single_defn <- sum(name_clusters$taxon_concept_count == 1)/nrow(name_clusters)
sum(name_clusters_no_extralimitals$taxon_concept_count == 0)
pc_single_defn <- sum(name_clusters_no_extralimitals$taxon_concept_count == 1)/nrow(name_clusters_no_extralimitals)
round(pc_single_defn * 100, 3)
length(unique(factor(name_clusters$order)))
summary(is.na(name_clusters$order))
length(unique(factor(name_clusters_no_extralimitals$order)))
summary(is.na(name_clusters_no_extralimitals$order))
name_clusters[which(is.na(name_clusters_no_extralimitals$order)),]$name
name_clusters_for_hierarchical_modeling <- name_clusters[-which(is.na(name_clusters$order)),]
nrow(name_clusters_for_hierarchical_modeling)
name_clusters_for_hierarchical_modeling <- name_clusters_no_extralimitals
nrow(name_clusters_for_hierarchical_modeling)
name_clusters_for_hierarchical_modeling <- name_clusters_no_extralimitals
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
length(unique(factor(name_clusters_no_extralimitals$order)))
nrow(name_clusters_for_hierarchical_modeling)
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
summary(name_clusters_for_hierarchical_modeling$first_added_year)
summary(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
hist(name_clusters_for_hierarchical_modeling$first_added_year)
hist(name_clusters_for_hierarchical_modeling$first_added_year)
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
hist(name_clusters_for_hierarchical_modeling$years_in_list)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
model_fit
post <- rstan::extract(model_fit)
traceplot(model_fit, inc_warmup=T)
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
count_per_order
count_per_order$order
count_per_order$count
length(count_per_order$count)
levels(count_per_order$order)
length(levels(count_per_order$order))
count_per_order
count_per_order$count
length(count_per_order$count)
levels(count_per_order$count)
levels(count_per_order$order)
length(levels(count_per_order$count))
nrow(levels(count_per_order$count))
length(levels(count_per_order$count))
levels(count_per_order$count)
levels(count_per_order$order)
name_clusters_for_hierarchical_modeling
name_clusters_for_hierarchical_modeling$order
levels(name_clusters_for_hierarchical_modeling$order)
factors(name_clusters_for_hierarchical_modeling$order)
length(name_clusters_for_hierarchical_modeling$order)
factor(name_clusters_for_hierarchical_modeling$order)
count_per_order
order_measurements <- data.frame(
row.names=count_per_order$order,
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
count_per_order$order
count_per_order$count
?levels
order_measurements <- data.frame(
row.names=factor(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
order_measurements <- data.frame(
row.names=count_per_order$order,
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
length(count_per_order$order)
length(levels(count_per_order$order))
length(count_per_order$count)
length(count_per_order$count)order_interval_width
order_interval_width
length(order_interval_width)
name_clusters_for_hierarchical_modeling$order
count_per_order$order
levels(count_per_order$order)
length(unique(factor(name_clusters_no_extralimitals$order)))
length(name_clusters_for_hierarchical_modeling$order)
factor(name_clusters_for_hierarchical_modeling$order)
length(name_clusters_for_hierarchical_modeling$order)
factor(name_clusters_for_hierarchical_modeling$family)
factor(name_clusters_for_hierarchical_modeling$genus)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
factor(name_clusters_for_hierarchical_modeling$order)
factor(name_clusters_for_hierarchical_modeling$family)
factor(name_clusters_for_hierarchical_modeling$genus)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
summary(name_clusters_for_hierarchical_modeling$first_added_year)
summary(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
hist(name_clusters_for_hierarchical_modeling$first_added_year)
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
hist(name_clusters_for_hierarchical_modeling$years_in_list)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
pairs(model_fit)
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d,
control = list(
adapt_delta = 0.9
)
, iter=5000)
post <- rstan::extract(model_fit)
post
model_fit
traceplot(model_fit, inc_warmup=T)
traceplot(model_fit, inc_warmup=T)
clear()
dev.off()
traceplot(model_fit, inc_warmup=T)
traceplot(model_fit, inc_warmup=T)
hist(post$sigma_i)
dev.off()
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=count_per_order$order,
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
levels(count_per_order$order)
name_clusters_for_hierarchical_modeling
length(order_interval_min)
factor(name_clusters_for_hierarchical_modeling$order)
as.integer(name_clusters_for_hierarchical_modeling$order)
summary(as.integer(name_clusters_for_hierarchical_modeling$order))
as.integer(name_clusters_for_hierarchical_modeling$order) > 26
as.integer(name_clusters_for_hierarchical_modeling$order) >= 26
name_clusters_for_hierarchical_modeling$order
relevel(name_clusters_for_hierarchical_modeling$order)
relevels(name_clusters_for_hierarchical_modeling$order)
name_clusters_for_hierarchical_modeling$order <- factor(name_clusters_for_hierarchical_modeling$order)
name_clusters_for_hierarchical_modeling$order
as.integer(name_clusters_for_hierarchical_modeling$order)
summary(as.integer(name_clusters_for_hierarchical_modeling$order))
name_clusters_for_hierarchical_modeling$family <- factor(name_clusters_for_hierarchical_modeling$family)
name_clusters_for_hierarchical_modeling$genus <- factor(name_clusters_for_hierarchical_modeling$genus)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
summary(name_clusters_for_hierarchical_modeling$first_added_year)
summary(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
hist(name_clusters_for_hierarchical_modeling$first_added_year)
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
hist(name_clusters_for_hierarchical_modeling$years_in_list)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d,
control = list(
adapt_delta = 0.9
# 1: There were 1 divergent transitions after warmup. Increasing adapt_delta above 0.8 may help. See
# http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
)
, iter=5000)
model_fit
post <- rstan::extract(model_fit)
traceplot(model_fit, inc_warmup=T)
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
hist(post$sigma_i)
hist(post$sigma_j)
hist(post$sigma_k)
library("shinystan")
my_sso <- launch_shinystan(model_fit)
hist(post$lambda_0)
lambda_0 <- mean(post$lambda_0)
lambda_0
exp(lambda_0)
1/exp(lambda_0)
1/exp(lambda_0)
library(dplyr)
filename_postfix <- '_pre1982'
order_mean <- apply(post$pi_i, 2, mean)
order_interval_min <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.025) } )
order_interval_max <- apply(post$pi_i, 2, function(x) { quantile(x, probs=0.975) } )
order_interval_width <- order_interval_max - order_interval_min
count_per_order <- name_clusters_for_hierarchical_modeling %>% group_by(order) %>% summarize(count = length(id))
order_measurements <- data.frame(
row.names=levels(count_per_order$order),
count=count_per_order$count,
min=order_interval_min,
mean=order_mean,
max=order_interval_max,
significant=ifelse(((order_interval_min > 0 & order_interval_max > 0) == 1) | ((order_interval_min < 0 & order_interval_max < 0) == 1), "yes", "no"),
interval_width=order_interval_width
)
order_measurements
write.csv(order_measurements, file=paste(sep="", 'tables/table_s4_hmod_order', filename_postfix, '.csv'))
family_mean <- apply(post$tau_j, 2, mean)
family_interval_min <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.025) } )
family_interval_max <- apply(post$tau_j, 2, function(x) { quantile(x, probs=0.975) } )
family_interval_width <- family_interval_max - family_interval_min
count_per_family <- name_clusters_for_hierarchical_modeling %>% group_by(family) %>% summarize(count = length(id))
family_measurements <- data.frame(
row.names=levels(count_per_family$family),
count=count_per_family$count,
min=family_interval_min,
mean=family_mean,
max=family_interval_max,
significant=ifelse(((family_interval_min > 0 & family_interval_max > 0) == 1) | ((family_interval_min < 0 & family_interval_max < 0) == 1), "yes", "no"),
interval_width=family_interval_width
)
family_measurements
write.csv(family_measurements, file=paste(sep="", 'tables/table_s5_hmod_family', filename_postfix, '.csv'))
genus_mean <- apply(post$rho_k, 2, mean)
genus_interval_min <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.025) } )
genus_interval_max <- apply(post$rho_k, 2, function(x) { quantile(x, probs=0.975) } )
genus_interval_width <- genus_interval_max - genus_interval_min
count_per_genus <- name_clusters_for_hierarchical_modeling %>% group_by(genus) %>% summarize(count = length(id))
genus_measurements <- data.frame(
row.names=levels(count_per_genus$genus),
count=count_per_genus$count,
min=genus_interval_min,
mean=genus_mean,
max=genus_interval_max,
significant=ifelse(((genus_interval_min > 0 & genus_interval_max > 0) == 1) | ((genus_interval_min < 0 & genus_interval_max < 0) == 1), "yes", "no"),
interval_width=genus_interval_width
)
genus_measurements
write.csv(genus_measurements, file=paste(sep="", 'tables/table_s6_hmod_genus', filename_postfix, '.csv'))
plot(genus_interval_width ~ count_per_genus$count, ylab="Interval width", xlab="Number of observations per genus", main="5% credible interval widths for number of observations")
summary(taxon_concepts_per_name)
summary(name_clusters$taxon_concept_count)
count_name_clusters_one_or_more <- sum(name_clusters$taxon_concept_count >= 1)
count_name_clusters_one_or_more
count_name_clusters_exactly_one <- sum(name_clusters$taxon_concept_count == 1)
count_name_clusters_exactly_one
stability <- count_name_clusters_more_than_one / total_recognized_name_clusters
round(stability * 100, 2)
stability <- count_name_clusters_more_than_one / total_recognized_name_clusters
stability <- count_name_clusters_exactly_one / total_recognized_name_clusters
round(stability * 100, 2)
count_name_clusters_exactly_two <- sum(name_clusters$taxon_concept_count == 2)
count_name_clusters_exactly_two
count_name_clusters_exactly_two <- sum(name_clusters$taxon_concept_count == 2)
count_name_clusters_exactly_two
stability <- count_name_clusters_exactly_one / total_recognized_name_clusters
single_correction <- count_name_clusters_exactly_one / total_recognized_name_clusters
round(single_correction * 100, 2)
single_correction <- count_name_clusters_exactly_two / total_recognized_name_clusters
round(single_correction * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count >= 2)
count_name_clusters_two_or_more
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
count_name_clusters_more_than_two <- sum(name_clusters$taxon_concept_count > 2)
count_name_clusters_more_than_two
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
splumps <- read.csv("../splumps/list.csv")
round(single_correction * 100, 2)

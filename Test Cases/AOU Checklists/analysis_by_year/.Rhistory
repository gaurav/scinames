splumps = zoo_splumps[2:(length(zoo_splumps))],
splits = zoo_splits[2:(length(zoo_splits))],
lumps = zoo_lumps[2:(length(zoo_lumps))]
)
gap_analysis
plot(gap_analysis$splumps ~ gap_analysis$gap,
main = "Lumps and splits",
xlab = "Gap (years)",
ylab = "Number of changes"
)
gap_model_splumps <- lm(gap_analysis$splumps ~ gap_analysis$gap)
summary(gap_model_splumps)
abline(gap_model_splumps, lty=2)
abline(gap_model_splumps, lty=2)
plot(gap_analysis$lumps ~ gap_analysis$gap,
main = "Lumps only",
xlab = "Gap (years)",
ylab = "Number of changes"
)
gap_model_lump <- lm(gap_analysis$lumps ~ gap_analysis$gap)
summary(gap_model_lump)
abline(gap_model_lump, lty=2)
plot(gap_analysis$splits ~ gap_analysis$gap,
main = "Splits only",
xlab = "Gap (years)",
ylab = "Number of changes"
)
summary(gap_model_splits)
gap_model_splits <- lm(gap_analysis$splits ~ gap_analysis$gap)
summary(gap_model_splits)
abline(gap_model_splits, lty=2)
dev.off()
par(mfrow=c(1, 1), cex=overall_cex)
final_year <- 2016
7
final_year <- 2016
offset <- 7
period <- 10
lumps_by_decade <- tapply(lumps$type, floor((lumps$year - offset) / period) * period + offset, length)
lumps_by_decade
lumps_by_decade["1957"] = 0
lumps_by_decade["1987"] = 0
lumps_by_decade <- lumps_by_decade[order(names(lumps_by_decade))]
names_lumps_by_decade <- paste(names(lumps_by_decade), "-", as.integer(names(lumps_by_decade)) + period - 1, sep="")
names_lumps_by_decade[1] <- "1889-1896"
names(lumps_by_decade) <- names_lumps_by_decade
lumps_by_year
lumps_by_decade
splits_by_decade <- tapply(splits$type, floor((splits$year - offset) / period) * period + offset, length)
splits_by_decade <- splits_by_decade[order(names(splits_by_decade))]
splits_by_decade
splits_by_decade["1917"] = 0
splits_by_decade["1957"] = 0
splits_by_decade <- splits_by_decade[order(names(splits_by_decade))]
names_splits_by_decade <- paste(names(splits_by_decade), "-", as.integer(names(splits_by_decade)) + period - 1, sep="")
names_splits_by_decade[1] <- "1889-1896"
names(splits_by_decade) <- names_splits_by_decade
splits_by_year
splits_by_decade
start_export(
paste("splumps_by_decade", sep=""),
width=1200,
height=800)
start_export(
paste("splumps_by_decade", sep=""),
width=1200,
height=800)
par(cex=overall_cex*1.2)
barplot(rbind(lumps_by_decade, splits_by_decade), beside=T,
col=rep(c(2, 4), length(lumps_by_decade)),
ylab="Number of lumps or splits",
xlab="Decade"
)
legend("topleft",
col=c(2, 4),
pch=c(15, 15),
legend=c("Lumps", "Splits")
)
dev.off()
par(cex=overall_cex)
splumps_by_checklist <- tapply(
splumps$id,
splumps$year,
length
)
sort(splumps_by_checklist)
lumps_by_checklist <- tapply(
lumps$id,
lumps$year,
length
)
sort(lumps_by_checklist)
splits_by_checklist <- tapply(
splits$id,
splits$year,
length
)
sort(splits_by_checklist)
splits_by_year[names(splits_by_year) >= 1980]
sum(splits_by_year[names(splits_by_year) >= 1980])
pc_splits_after_1980 <- sum(splits_by_year[names(splits_by_year) >= 1980])/sum(splits_by_year) * 100
round(pc_splits_after_1980, 2)
sum(splits_by_year[names(splits_by_year) >= 1980])
round(100 - pc_splits_after_1980, 2)
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
length(table(taxon_concepts$name_cluster_id))
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
length(table(taxon_concepts$name_cluster_id))
nrow(name_clusters)
summary(name_clusters$taxon_concept_count)
1.000
summary(name_clusters$taxon_concept_count)
sum(is.na(name_clusters$taxon_concept_count))
sum(name_clusters$taxon_concept_count)
sort(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]
name_clusters[name_clusters$taxon_concept_count == max(name_clusters$taxon_concept_count),]
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
summary(taxon_concepts_per_name)
which.na(taxon_concepts_per_name)
is.na(taxon_concepts_per_name)
which(is.na(taxon_concepts_per_name))
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
summary(taxon_concepts_per_name)
taxon_concepts_per_name <- tapply(
taxon_concepts$name,
factor(taxon_concepts$name),
length
)
taxon_concepts_per_name
sum(taxon_concepts_per_name)
taxon_concepts_per_name[which.max(taxon_concepts_per_name)] <- NA
taxon_concepts_per_name[which.max(taxon_concepts_per_name)]
summary(taxon_concepts_per_name)
name_clusters$taxon_concept_count
sum(name_clusters$taxon_concept_count)
total_recognized_name_clusters = nrow(name_clusters)
total_recognized_name_clusters
count_name_clusters_one_or_more <- sum(name_clusters$taxon_concept_count > 1)
count_name_clusters_one_or_more
correction_rate <- count_name_clusters_one_or_more / total_recognized_name_clusters
round(correction_rate * 100, 2)
count_name_clusters_two_or_more <- sum(name_clusters$taxon_concept_count > 2)
count_name_clusters_two_or_more
recorrection_rate <- count_name_clusters_two_or_more / total_recognized_name_clusters
round(recorrection_rate * 100, 2)
splumps <- read.csv("../splumps/list.csv")
nrow(splumps)
summary(splumps$type)
lumps <- splumps[splumps$type == "lump",]
splits <- splumps[splumps$type == "split",]
nrow(lumps)
nrow(splits)
(splumps$perfect_reversion_count == 1)
sum(lumps$reversion_count >= 1)
reversion_pc_lumps = sum(lumps$reversion_count >= 1)/nrow(lumps)
round(reversion_pc_lumps * 100, 2)
sum(splits$reversion_count >= 1)
reversion_pc_splits = sum(splits$reversion_count >= 1)/nrow(splits)
round(reversion_pc_splits * 100, 2)
sum(lumps$perfect_reversion_count >= 1)
perfect_reversion_pc_lumps = sum(lumps$perfect_reversion_count >= 1)/nrow(lumps)
round(perfect_reversion_pc_lumps * 100, 2)
sum(splits$perfect_reversion_count >= 1)
perfect_reversion_pc_splits = sum(splits$perfect_reversion_count >= 1)/nrow(splits)
round(perfect_reversion_pc_splits * 100, 2)
sum(splumps$reversion_count >= 1)
reversion_pc_splumps = sum(splumps$reversion_count >= 1)/nrow(splumps)
round(reversion_pc_splumps * 100, 2)
sum(splumps$perfect_reversion_count >= 1)
perfect_reversion_pc_splumps = sum(splumps$perfect_reversion_count >= 1)/nrow(splumps)
round(perfect_reversion_pc_splumps * 100, 2)
if(0) {
lumps_not_reverting_anything <- lumps[lumps$reversion_count == 0,]
nrow(lumps_not_reverting_anything)
# - 75 lumps
# Proportion of all lumps
round(nrow(lumps_not_reverting_anything)/nrow(lumps) * 100, 2)
# - 65.22%
lumps_with_reversions <- lumps[lumps$reversion_count > 0,]
nrow(lumps_with_reversions)
# - 40 lumps
# Of these 39 lumps, what proportion of them are reverting a previous split?
lumps_with_reversions_reverting_previous <- lumps_with_reversions[lumps_with_reversions$reverts_a_previous_change == "yes",]
nrow(lumps_with_reversions_reverting_previous)
# - 10 lumps
# Proportion of all lumps
round(nrow(lumps_with_reversions_reverting_previous)/nrow(lumps) * 100, 2)
# - 8.7%
# Proportion of lumps that have not yet been reverted
count_lumps_never_reverted <-
nrow(lumps_not_reverting_anything) +
nrow(lumps_with_reversions[lumps_with_reversions$reverts_all_previous_changes == "yes",])
count_lumps_never_reverted
# - 81
round(count_lumps_never_reverted/nrow(lumps) * 100, 2)
# - 70.43%
splits_not_reverting_anything <- splits[splits$reversion_count == 0,]
nrow(splits_not_reverting_anything)
# - 47 splits
# Proportion of all splits
round(nrow(splits_not_reverting_anything)/nrow(splits) * 100, 2)
# - 55.95%
splits_with_reversions <- splits[splits$reversion_count > 0,]
nrow(splits_with_reversions)
# - 37 splits
# Of these 36 splits, what proportion of them are reverting a previous lump?
splits_with_reversions_reverting_previous <- splits_with_reversions[splits_with_reversions$reverts_a_previous_change == "yes",]
nrow(splits_with_reversions_reverting_previous)
# - 31 splits
# Proportion of splits that have not yet been reverted
count_splits_never_reverted <-
nrow(splits_not_reverting_anything) +
nrow(splits_with_reversions[splits_with_reversions$reverts_all_previous_changes == "yes",])
count_splits_never_reverted
# - 76
round(count_splits_never_reverted/nrow(splits) * 100, 2)
# - 90.48%
# Proportion of all splits
round(nrow(splits_with_reversions_reverting_previous)/nrow(splits) * 100, 2)
# - 36.9%
# Interestingly, we can also figure this out by looking at splumps that revert all previous changes -- since technically those
# that have no reversions also revert all previous!
nrow(lumps[lumps$reverts_all_previous_changes == "yes",])
# - 81 = 75 lumps not reverting anything + 10 lumps reverting a previous split
# DISCREPENCY!!! Expected 81, got 81 (so is this no longer a problem?)
nrow(splits[splits$reverts_all_previous_changes == "yes",])
# - 76 = ???
# DISCREPENCY!!! Expected 81, got 83 (+2)
# We can do the same with perfect reversions.
lumps_not_perfectly_reverting_anything <- lumps[lumps$perfect_reversion_count == 0,]
nrow(lumps_not_perfectly_reverting_anything)
# - 94 lumps
lumps_with_perfect_reversions <- lumps[lumps$perfect_reversion_count > 0,]
nrow(lumps_with_perfect_reversions)
# - 21 lumps
# Proportion of all lumps
round(nrow(lumps_with_perfect_reversions)/nrow(lumps) * 100, 2)
# - 18.26%
# Of these 21 lumps, what proportion of them are reverting a previous split?
lumps_with_perfect_reversions_reverting_previous <- lumps_with_perfect_reversions[lumps_with_perfect_reversions$perfectly_reverts_a_previous_change == "yes",]
nrow(lumps_with_perfect_reversions_reverting_previous)
# - 7 lumps
# Proportion of all lumps
round(nrow(lumps_with_perfect_reversions_reverting_previous)/nrow(lumps) * 100, 2)
# - 6.09%
count_lumps_never_perfectly_reverted <-
nrow(lumps_not_perfectly_reverting_anything) +
nrow(lumps_with_perfect_reversions[lumps_with_perfect_reversions$reverts_all_previous_changes == "yes",])
count_lumps_never_perfectly_reverted
# - 99
round(count_lumps_never_perfectly_reverted/nrow(lumps) * 100, 2)
# - 86.09%
splits_not_perfectly_reverting_anything <- splits[splits$perfect_reversion_count == 0,]
nrow(splits_not_perfectly_reverting_anything)
# - 64 splits
splits_with_perfect_reversions <- splits[splits$perfect_reversion_count > 0,]
nrow(splits_with_perfect_reversions)
# - 20 splits
# Of these 20 splits, what proportion of them are reverting a previous lump?
splits_with_perfect_reversions_reverting_previous <- splits_with_perfect_reversions[splits_with_perfect_reversions$perfectly_reverts_a_previous_change == "yes",]
nrow(splits_with_perfect_reversions_reverting_previous)
# - 15 splits
count_splits_never_perfectly_reverted <-
nrow(splits_not_perfectly_reverting_anything) +
nrow(splits_with_perfect_reversions[splits_with_perfect_reversions$reverts_all_previous_changes == "yes",])
count_splits_never_perfectly_reverted
# - 78
round(count_splits_never_perfectly_reverted/nrow(splits) * 100, 2)
# - 92.86%
# Interestingly, we can also figure this out by looking at splumps that revert all previous changes -- since technically those
# that have no reversions also revert all previous!
nrow(lumps[lumps$perfectly_reverts_all_previous_changes == "yes",])
# - 99 =
# ??? 93 lumps not reverting anything + 7 lumps reverting a previous split
# ??? DISCREPENCY!!! Expected 98, got 100
nrow(splits[splits$perfectly_reverts_all_previous_changes == "yes",])
# - 78
# ??? = 69 splits not reverting anything + 15 splits reverting a previous split
# ??? DISCREPENCY!!! Expected 83, got 84
# Okay, so what's the important summary here?
# - Proportion of lumps that revert previous splits:
nrow(splits_with_reversions_reverting_previous)/nrow(splits)
(nrow(splits_with_reversions) - nrow(splits_with_reversions_reverting_previous))/nrow(splits)
# ???
}
lumps_with_perfect_reversions <- lumps[lumps$perfect_reversion_count >= 1,]
lumps_with_perfect_reversions
nrow(lumps_with_perfect_reversions)
perfect_lumps <- factor(lumps_with_perfect_reversions$perfect_reversions_summary)
table(perfect_lumps)
splits_with_perfect_reversions <- splits[splits$perfect_reversion_count >= 1,]
splits_with_perfect_reversions
nrow(splits_with_perfect_reversions)
perfect_splits <- factor(splits_with_perfect_reversions$perfect_reversions_summary)
table(perfect_splits)
perfect_splumps <- splumps[splumps$perfect_reversion_count >= 1,]
perfect_reversion_table <- table(factor(perfect_splumps$perfect_reversions_summary))
perfect_reversion_table
perfect_reversions <- names(perfect_reversion_table)
count_total_perfect_reversions <- length(perfect_reversions)
count_lump_split_lump <- 1
perfect_reversion_table
perfect_reversions <- names(perfect_reversion_table)
count_total_perfect_reversions <- length(perfect_reversions)
count_total_perfect_reversions
splumps <- read.csv("../splumps/list.csv")
nrow(splumps)
summary(splumps$type)
lumps <- splumps[splumps$type == "lump",]
splits <- splumps[splumps$type == "split",]
nrow(lumps)
nrow(splits)
sum(splits$perfect_reversion_count > 0)
pc_splits_perfectly_reverting_lumps <- sum(splits$perfect_reversion_count > 0)/nrow(splits) * 100
round(pc_splits_perfectly_reverting_lumps, 2)
splits_since_1980 <- splits[splits$year >= 1980,]
nrow(splits_since_1980)
splits_since_1980$year
sum(splits_since_1980$perfect_reversion_count > 0)
pc_splits_perfectly_reverting_lumps_since_1980 <- sum(splits_since_1980$perfect_reversion_count > 0)/nrow(splits_since_1980) * 100
splits_since_1980 <- splits[splits$year >= 1980,]
nrow(splits_since_1980)
splits_since_1980$year
sum(splits_since_1980$perfect_reversion_count > 0)
pc_splits_perfectly_reverting_lumps_since_1980 <- sum(splits_since_1980$perfect_reversion_count > 0)/nrow(splits_since_1980) * 100
round(pc_splits_perfectly_reverting_lumps_since_1980, 2)
splits_since_1950 <- splits[splits$year >= 1950,]
nrow(splits_since_1950)
splits_since_1950$year
sum(splits_since_1950$perfect_reversion_count > 0)
pc_splits_reverting_lumps_since_1950 <- sum(splits_since_1950$perfect_reversion_count > 0)/nrow(splits_since_1950) * 100
round(pc_splits_reverting_lumps_since_1950, 2)
sum(splits_since_1980$reversion_count > 0)
pc_splits_reverting_lumps_since_1980 <- sum(splits_since_1980$reversion_count > 0)/nrow(splits_since_1980) * 100
round(pc_splits_reverting_lumps_since_1980, 2)
round(pc_splits_reverting_lumps_since_1980, 2)
taxon_concepts <- read.csv("../taxon_concepts/list.csv")
nrow(taxon_concepts)
pc_splits_reverting_lumps_since_1980 <- sum(splits_since_1980$reversion_count > 0)/nrow(splits_since_1980) * 100
name_clusters <- read.csv("../currently_recognized/list.csv")
nrow(name_clusters)
sum(table(name_clusters$name) > 1)
name_clusters[which(name_clusters$name == "Rallus obsoletus "),]
round(mean(name_clusters$taxon_concept_count), 3)
sd(name_clusters$taxon_concept_count)
summary(name_clusters$taxon_concept_count > 1)
start_export('hist_definition_counts')
par(cex=overall_cex*1.2)
table_taxon_concept_counts <- table(name_clusters$taxon_concept_count)
table_taxon_concept_counts
table_taxon_concept_counts
table_taxon_concept_counts
barplot(table(name_clusters$taxon_concept_count),
main = "Redescriptions amongst currently recognized species",
ylab = "Frequency",
xlab = "Number of taxon concepts",
col = "blue"
)
dev.off()
par(cex=overall_cex)
length(name_clusters$taxon_concept_count)
name_clusters[which.max(name_clusters$taxon_concept_count),]$name
sum(name_clusters$taxon_concept_count == 0)
pc_single_defn <- sum(name_clusters$taxon_concept_count == 1)/nrow(name_clusters)
pc_single_defn <- sum(name_clusters$taxon_concept_count == 1)/nrow(name_clusters)
round(pc_single_defn * 100, 3)
length(unique(factor(name_clusters$order)))
summary(is.na(name_clusters$order))
name_clusters[which(is.na(name_clusters$order)),]$name
name_clusters_for_hierarchical_modeling <- name_clusters[-which(is.na(name_clusters$order)),]
nrow(name_clusters_for_hierarchical_modeling)
summary(is.na(name_clusters_for_hierarchical_modeling$order))
length(unique(factor(name_clusters_for_hierarchical_modeling$family)))
summary(is.na(name_clusters_for_hierarchical_modeling$family))
length(unique(factor(name_clusters_for_hierarchical_modeling$genus)))
summary(is.na(name_clusters_for_hierarchical_modeling$genus))
summary(name_clusters_for_hierarchical_modeling$first_added_year)
summary(is.na(name_clusters_for_hierarchical_modeling$first_added_year))
hist(name_clusters_for_hierarchical_modeling$first_added_year)
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
hist(name_clusters_for_hierarchical_modeling$years_in_list)
name_clusters_for_hierarchical_modeling$years_in_list <- 2017 - name_clusters_for_hierarchical_modeling$first_added_year
hist(name_clusters_for_hierarchical_modeling$years_in_list)
library(rstan)
install.packages("rstan")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
system('g++ -v')
system('where make')
install.packages("rstan")
round(mean(name_clusters$taxon_concept_count), 3)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
reset
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
Sys.getenv("PATH")
devtools::has_devel()
library(devtools)
system("where make")
Sys.setenv
?Sys.setenv
getwd()
Sys.getenv("PATH")
system("where make")
devtools::has_devel()
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
stan_d <- list(
nobs = nrow(name_clusters_for_hierarchical_modeling),
norder = length(levels(name_clusters_for_hierarchical_modeling$order)),
nfamily = length(levels(name_clusters_for_hierarchical_modeling$family)),
ngenus = length(levels(name_clusters_for_hierarchical_modeling$genus)),
y = name_clusters_for_hierarchical_modeling$taxon_concept_count,
order = as.integer(name_clusters_for_hierarchical_modeling$order),
family = as.integer(name_clusters_for_hierarchical_modeling$family),
genus = as.integer(name_clusters_for_hierarchical_modeling$genus),
years_in_list = name_clusters_for_hierarchical_modeling$years_in_list
)
model_fit <- stan('counts_per_name_model.stan', data=stan_d) #, iter=5000
